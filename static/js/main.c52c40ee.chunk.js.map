{"version":3,"sources":["Artist.js","Search.js","Info.js","App.js","reportWebVitals.js","index.js"],"names":["Artist","artist","tracks","updateAudio","setAudioUrl","length","x","images","name","followers","total","toString","replace","undefined","src","url","className","alt","map","track","id","album","preview_url","onClick","onEnded","style","marginTop","marginBottom","API_ADDRESS","Search","setArtist","setTracks","getArtistName","useState","searching","setSearching","search","actualQuery","document","querySelector","value","trim","console","log","fetch","then","response","json","artists","queryArtist","items","catch","error","alert","message","Form","inline","Control","placeholder","onKeyDown","e","key","preventDefault","keyDown","Button","variant","disabled","Info","props","show","setShow","Modal","onHide","size","aria-labelledby","centered","Body","App","audioUrl","song","setSong","paused","setPaused","previewUrl","audio","getElementById","play","pause","newAudio","currentTime","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c52c40ee.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Artist({artist, tracks, updateAudio, setAudioUrl}) {\r\n    if(artist === null || tracks.length === 0) return null;\r\n    //destructure the artist object\r\n    const {images, name, followers} = artist;\r\n    return (\r\n        <div>\r\n            <h3>{name}</h3>\r\n            <p>{format(followers.total)} followers</p>\r\n            {\r\n                //check if images[0] isn't undefined before accessing it\r\n                images[0] !== undefined ? (\r\n                    <img src={images[0].url} className=\"profile\" alt=\"\"/>\r\n                ) : (\r\n                    <p>This artist doesn't have a profile picture.</p>\r\n                )\r\n            }\r\n            <h4>Top Tracks</h4>\r\n            <div>\r\n            {\r\n                //map each track to a div containing the image\r\n                tracks.map(track => {\r\n                    const {id, name, album, preview_url} = track;\r\n                    return (\r\n                        <div key={id} onClick={() => updateAudio(preview_url, name)} className=\"track\">\r\n                            <img src={album.images[0].url} className=\"trackImage\" alt=\"\"/>\r\n                            <audio id={preview_url} onEnded={() => setAudioUrl(\"\")}src={preview_url}/>\r\n                            <p style={{marginTop: 0, marginBottom: 10}}>{name}</p>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction format(x)\r\n{\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n\r\nexport default Artist;","import React, {useState} from \"react\";\r\nimport {Form, Button} from \"react-bootstrap\";\r\n\r\nconst API_ADDRESS = \"https://spotify-api-wrapper.appspot.com/\";\r\n\r\n//parent functions can be called in the child\r\nfunction Search({artist, setArtist, setTracks, updateAudio, getArtistName}) {\r\n    const [searching, setSearching] = useState(false);\r\n\r\n    function keyDown(e) {\r\n        if(e.key === \"Enter\")\r\n        {\r\n            e.preventDefault();\r\n            search();\r\n        }\r\n    }\r\n\r\n    function search() {\r\n        let actualQuery = document.querySelector(\"input\").value.replace(/[^\\w\\s-.~]/g, \"\").trim();\r\n        console.log(\"Query:\", actualQuery);\r\n        if (!actualQuery) return;\r\n\r\n        setSearching(true);\r\n        //fetch is asynchronous (code after fetch happens immediately)\r\n        fetch(`${API_ADDRESS}/artist/${actualQuery}`)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                if (json.artists.total > 0) {\r\n                    //get the top artist from the artists object returned from the fetch\r\n                    //artist is an object with many properties\r\n                    const queryArtist = json.artists.items[0];\r\n                    console.log(queryArtist);\r\n\r\n                    //only fetch and stop sounds again if the artist is different\r\n                    if(queryArtist.name !== getArtistName()) {\r\n                        setArtist(queryArtist);\r\n                        //get their top tracks (it wasn't in the artist object already)\r\n                        fetch(`${API_ADDRESS}/artist/${queryArtist.id}/top-tracks`)\r\n                            .then(response => response.json())\r\n                            .then(json => {\r\n                                setSearching(false);\r\n                                updateAudio(\"\", \"\");\r\n                                const tracks = json.tracks;\r\n                                console.log(tracks);\r\n                                setTracks(tracks);\r\n                            })\r\n                            .catch(error => alert(error.message));\r\n                    }\r\n                    else setSearching(false);\r\n                }\r\n                else\r\n                {\r\n                    updateAudio(\"\", \"\");\r\n                    setSearching(false);\r\n                    setArtist(null);\r\n                    setTracks([]);\r\n                }\r\n            }).catch(error => alert(error.message));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form inline>\r\n                <Form.Control id=\"search-bar\"\r\n                    placeholder=\"Search for an artist...\"\r\n                    onKeyDown={e => keyDown(e)}\r\n                    />\r\n                <Button\r\n                    variant=\"success\"\r\n                    onClick={search}\r\n                    disabled={searching}>\r\n                    {searching ? \"Searching...\" : \"Search\"} </Button>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search;","import React, {useState} from \"react\";\r\nimport {Modal, Button} from \"react-bootstrap\";\r\n\r\nfunction Info(props) {\r\n    const [show, setShow] = useState(true);\r\n    return (\r\n        <Modal show={show} onHide={() => setShow(false)}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n            <Modal.Body>\r\n                <h4>Song Tracker</h4>\r\n                <hr/>\r\n                <p>This app uses Spotify's web API to get the top tracks of artists by searching for them.</p>\r\n                <p>After searching for an artist, click on the track to the listen to a 30-second preview.</p>\r\n            </Modal.Body>\r\n                <Button onClick={() => setShow(false)}>Close</Button>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default Info;","import React, {useState} from \"react\";\nimport Artist from \"./Artist\";\nimport Search from \"./Search\";\nimport Info from \"./Info\";\n\nfunction App() {\n    //put all global variables here since parent <-> child is possible\n    //but child <-> child isn't possible\n    const [artist, setArtist] = useState(null);\n    const [tracks, setTracks] = useState([]);\n    const [audioUrl, setAudioUrl] = useState(\"\");\n    const [song, setSong] = useState(\"\");\n    const [paused, setPaused] = useState(true);\n\n    function getArtistName() {\n        return artist === null ? \"\" : artist.name;\n    }\n\n    function updateAudio(previewUrl, song) {\n        let audio = document.getElementById(audioUrl);\n        if (audioUrl === previewUrl) {\n            if (audio !== null) {\n                if (audio.paused) audio.play(); else audio.pause();\n                setPaused(audio.paused);\n            }\n        } else {\n            if (audio !== null && !audio.paused) {\n                audio.pause();\n                setPaused(true);\n            }\n            let newAudio = document.getElementById(previewUrl);\n            if (newAudio !== null) {\n                newAudio.currentTime = 0;\n                newAudio.play();\n                setPaused(false);\n            }\n        }\n        setAudioUrl(previewUrl);\n        setSong(song);\n    }\n\n    return (\n        <div>\n            <Info/>\n            <h1>Song Tracker</h1>\n            <Search artist={artist} setArtist={setArtist} setTracks={setTracks}\n                    updateAudio={updateAudio} getArtistName={getArtistName}/>\n            <hr/>\n            <Artist artist={artist} tracks={tracks} updateAudio={updateAudio} setAudioUrl={setAudioUrl}/>\n            <div className={(audioUrl !== \"\") ? \"footer-active\" : \"footer\"}>\n                <p>{audioUrl !== \"\" ? (paused ? getArtistName() + \" - \" + song + \" (Paused)\" :\n                    getArtistName() + \" - \" + song + \" (Playing)\") : \"Not playing\"}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}